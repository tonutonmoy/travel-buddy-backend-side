// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  User Model
model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  name               String
  password           String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  trip               Trip[]
  travelBuddy        TravelBuddy[]
  userProfile        UserProfile[]

  @@map("users")
}

//  Trip Model
model Trip {
  id                 String     @id @default(uuid())
  userId             String     
  destination        String
  startDate          String
  endDate            String   
  budget             Int
  activities         String[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  user               User       @relation(fields: [userId], references: [id])
  trip               TravelBuddy[]

  @@map("trips")
}

// TravelBuddy
model TravelBuddy {
  id                 String     @id @default(uuid())
  userId             String     
  tripId             String
  status             Status     @default(PENDING)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  user               User       @relation(fields: [userId], references: [id])
  trip               Trip       @relation(fields: [tripId], references: [id])
 

  @@map("travelBuddys")
}

// UserProfile 
model UserProfile {
  id                 String     @id @default(uuid())
  userId             String     
  bio                String
  age                Int
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  user               User       @relation(fields: [userId], references: [id])
  
 

  @@map("userProfiles")
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
